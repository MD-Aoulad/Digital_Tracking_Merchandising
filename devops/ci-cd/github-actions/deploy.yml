name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Quality Checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    
    strategy:
      matrix:
        include:
          - name: Frontend
            working-directory: ./
            dockerfile: Dockerfile.frontend
            context: ./
          - name: Backend
            working-directory: ./backend
            dockerfile: Dockerfile
            context: ./backend
          - name: API Gateway
            working-directory: ./api-gateway
            dockerfile: Dockerfile
            context: ./api-gateway
          - name: Mobile App
            working-directory: ./WorkforceMobileExpo
            dockerfile: Dockerfile
            context: ./WorkforceMobileExpo

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.name }}-${{ matrix.working-directory }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.context }}/${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run tests
      working-directory: ${{ matrix.working-directory }}
      run: |
        npm ci
        npm run test:ci
        npm run test:coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.working-directory }}/coverage/lcov.info
        flags: ${{ matrix.name }}
        name: ${{ matrix.name }}-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        
    - name: Run integration tests
      run: |
        cd backend
        npm run test:integration
        
    - name: Run E2E tests
      run: |
        npm run test:e2e

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Artillery
      run: npm install -g artillery
      
    - name: Run load tests
      run: |
        artillery run devops/performance/load-test.yml
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          http://localhost:3000
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster digital-tracking-cluster-dev \
          --service digital-tracking-service-dev \
          --force-new-deployment
          
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster digital-tracking-cluster-dev \
          --services digital-tracking-service-dev
          
    - name: Run smoke tests
      run: |
        npm run test:smoke -- --base-url=${{ secrets.DEV_URL }}

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster digital-tracking-cluster-staging \
          --service digital-tracking-service-staging \
          --force-new-deployment
          
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster digital-tracking-cluster-staging \
          --services digital-tracking-service-staging
          
    - name: Run staging tests
      run: |
        npm run test:staging -- --base-url=${{ secrets.STAGING_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Create deployment backup
      run: |
        # Create backup of current deployment
        aws ecs describe-services \
          --cluster digital-tracking-cluster-prod \
          --services digital-tracking-service-prod > backup.json
        
    - name: Deploy to ECS
      run: |
        aws ecs update-service \
          --cluster digital-tracking-cluster-prod \
          --service digital-tracking-service-prod \
          --force-new-deployment
          
    - name: Wait for deployment to complete
      run: |
        aws ecs wait services-stable \
          --cluster digital-tracking-cluster-prod \
          --services digital-tracking-service-prod
          
    - name: Run production health checks
      run: |
        npm run test:health -- --base-url=${{ secrets.PROD_URL }}
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, rolling back..."
        # Implement rollback logic here
        aws ecs update-service \
          --cluster digital-tracking-cluster-prod \
          --service digital-tracking-service-prod \
          --task-definition $(cat backup.json | jq -r '.services[0].taskDefinition')

  # Notifications
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        
    - name: Send email notification
      if: needs.deploy-production.result == 'success'
      run: |
        # Send email notification for production deployments
        echo "Production deployment completed successfully" 
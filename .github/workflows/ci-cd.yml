# CI/CD Pipeline - Free Tier Startup Edition
# 
# This workflow provides FREE CI/CD for startups using:
# - GitHub Actions: 2000 minutes/month free (public repos)
# - Vercel: 100GB bandwidth/month free
# - Render: 750 hours/month free
# - Supabase: 500MB database free
# - Expo: Free mobile app builds

name: CI/CD Pipeline - Free Tier

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Test all applications (FREE - uses GitHub Actions minutes)
  test:
    name: Run Tests (Free)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - name: Frontend Tests
            working-directory: ./
            test-command: npm test -- --watchAll=false --coverage --passWithNoTests
          - name: Backend Tests
            working-directory: ./backend
            test-command: npm run test:all
          - name: Mobile App Tests
            working-directory: ./mobile
            test-command: npm test -- --watchAll=false --passWithNoTests
          - name: WorkforceMobileApp Tests
            working-directory: ./WorkforceMobileApp
            test-command: npm test -- --watchAll=false --passWithNoTests
          - name: WorkforceMobileExpo Tests
            working-directory: ./WorkforceMobileExpo
            test-command: npm test -- --watchAll=false --passWithNoTests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd ${{ matrix.working-directory }}
        npm ci

    - name: Run tests
      run: |
        cd ${{ matrix.working-directory }}
        ${{ matrix.test-command }}

    # Upload test coverage to Codecov (FREE)
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: matrix.name == 'Frontend Tests'
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # E2E Tests (FREE - uses GitHub Actions minutes)
  e2e-tests:
    name: E2E Tests (Free)
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start backend server
      run: |
        cd backend
        npm ci
        npm start &
        sleep 10

    - name: Start frontend server
      run: |
        npm start &
        sleep 10

    # Run Cypress E2E tests (FREE)
    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        start: npm start
        wait-on: 'http://localhost:3000'
        browser: chrome
        record: false

  # Build applications (FREE - uses GitHub Actions minutes)
  build:
    name: Build Applications (Free)
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci
        cd ../mobile && npm ci

    - name: Build frontend
      run: npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

    - name: Build backend
      run: |
        cd backend
        npm run build

    # Upload build artifacts (FREE - GitHub Actions storage)
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          build/
          backend/dist/
          mobile/

  # Deploy to staging (FREE - Vercel + Render free tiers)
  deploy-staging:
    name: Deploy to Staging (Free)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    # Deploy frontend to Vercel (FREE - 100GB bandwidth/month)
    - name: Deploy to Vercel (Frontend) - FREE
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'

    # Deploy backend to Render (FREE - 750 hours/month)
    - name: Deploy to Render (Backend) - FREE
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json"

  # Deploy to production (FREE - Vercel + Render free tiers)
  deploy-production:
    name: Deploy to Production (Free)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts

    # Deploy frontend to Vercel (FREE - 100GB bandwidth/month)
    - name: Deploy to Vercel (Frontend) - FREE
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'

    # Deploy backend to Render (FREE - 750 hours/month)
    - name: Deploy to Render (Backend) - FREE
      run: |
        curl -X POST "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json"

  # Mobile app deployment (FREE - Expo free tier)
  deploy-mobile:
    name: Deploy Mobile Apps (Free)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    # Install Expo CLI (FREE)
    - name: Install Expo CLI
      run: npm install -g @expo/cli

    # Setup Expo (FREE - Expo free tier)
    - name: Setup Expo
      run: |
        cd mobile
        npm ci
        npx expo login --non-interactive --username ${{ secrets.EXPO_USERNAME }} --password ${{ secrets.EXPO_PASSWORD }}

    # Build and publish mobile app (FREE - Expo free tier)
    - name: Build and publish mobile app
      run: |
        cd mobile
        npx expo build:android --non-interactive
        npx expo build:ios --non-interactive

  # Security scan (FREE - npm audit + Snyk free tier)
  security-scan:
    name: Security Scan (Free)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Run npm audit (FREE)
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate
        cd ../mobile && npm audit --audit-level=moderate

    # Run Snyk security scan (FREE - Snyk free tier)
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Performance testing (FREE - Lighthouse CI)
  performance-test:
    name: Performance Test (Free)
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci

    # Run Lighthouse CI (FREE)
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.STAGING_URL }}
        uploadArtifacts: true
        temporaryPublicStorage: true 
version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
      args:
        - REACT_APP_API_URL=http://localhost:5000/api
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_AUTH_SERVICE_URL=http://localhost:5000/api/auth
      - REACT_APP_ENABLE_ERROR_MONITORING=true
      - REACT_APP_ENABLE_RETRY_MECHANISM=true
      - REACT_APP_LOGIN_TIMEOUT=30000
      - REACT_APP_MAX_RETRY_ATTEMPTS=3
      - REACT_APP_HEALTH_CHECK_INTERVAL=30000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mobile-app:
    build:
      context: ./WorkforceMobileExpo
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_AUTH_SERVICE_URL=http://localhost:5000/api/auth
      - REACT_APP_ENABLE_ERROR_MONITORING=true
      - REACT_APP_ENABLE_RETRY_MECHANISM=true
      - REACT_APP_LOGIN_TIMEOUT=30000
      - REACT_APP_MAX_RETRY_ATTEMPTS=3
      - REACT_APP_HEALTH_CHECK_INTERVAL=30000
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-workforce_user}:${POSTGRES_PASSWORD:-workforce_password}@postgres:5432/${POSTGRES_DB:-workforce_db}
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - backend-data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - app-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-workforce_db}
      - POSTGRES_USER=${POSTGRES_USER:-workforce_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-workforce_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/todos.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./backend/chat_system.sql:/docker-entrypoint-initdb.d/02-init.sql:ro
      - ./backend/members.sql:/docker-entrypoint-initdb.d/00-members.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-workforce_user} -d ${POSTGRES_DB:-workforce_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - app-network
    restart: unless-stopped

  db-backup:
    image: postgres:15-alpine
    volumes:
      - ./backups:/backups
      - postgres-data:/var/lib/postgresql/data:ro
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-workforce_db}
      - POSTGRES_USER=${POSTGRES_USER:-workforce_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-workforce_password}
    entrypoint: ["sh", "-c", "while true; do pg_dump -h postgres -U $${POSTGRES_USER} $${POSTGRES_DB} > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql; find /backups -name 'backup_*.sql' -mtime +7 -delete; sleep 86400; done"]
    networks:
      - app-network
    restart: unless-stopped

  haproxy:
    image: haproxy:2.8-alpine
    ports:
      - "8080:80"
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./monitoring/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  backend-data:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  app-network:
    driver: bridge 
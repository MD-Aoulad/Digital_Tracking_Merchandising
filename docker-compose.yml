version: '3.8'

services:
  # API Gateway - Single entry point for all microservices
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:3000"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - CHAT_SERVICE_URL=http://chat-service:3003
      - ATTENDANCE_SERVICE_URL=http://attendance-service:3007
      - TODO_SERVICE_URL=http://todo-service:3005
      - REPORT_SERVICE_URL=http://report-service:3006
      - APPROVAL_SERVICE_URL=http://approval-service:3011
      - WORKPLACE_SERVICE_URL=http://workplace-service:3008
      - NOTIFICATION_SERVICE_URL=http://notification-service:3009
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
    depends_on:
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      attendance-service:
        condition: service_healthy
      todo-service:
        condition: service_healthy
      report-service:
        condition: service_healthy
      approval-service:
        condition: service_healthy
      workplace-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Authentication Microservice
  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    ports:
      - "3010:3001"  # External port 3010, internal port 3001
    environment:
      - NODE_ENV=development
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - AUTH_DB_URL=postgresql://auth_user:auth_password@auth-db:5432/auth_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      auth-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Management Microservice
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3002
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - USER_DB_URL=postgresql://user_user:user_password@user-db:5432/user_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      user-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chat Microservice
  chat-service:
    build:
      context: ./microservices/chat-service
      dockerfile: Dockerfile
    ports:
      - "3012:3003"  # External port 3012, internal port 3003
    environment:
      - NODE_ENV=development
      - PORT=3003
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - CHAT_DB_URL=postgresql://chat_user:chat_password@chat-db:5432/chat_db
      - REDIS_URL=redis://redis:6379
      - WEBSOCKET_PORT=3003
    depends_on:
      - chat-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Attendance Tracking Microservice
  attendance-service:
    build:
      context: ./microservices/attendance-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - PORT=3007
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - DATABASE_URL=postgresql://attendance_user:attendance_password@attendance-db:5432/attendance_db
      - REDIS_URL=redis://redis:6379
      - UPLOAD_PATH=/uploads/attendance
      - MAX_FILE_SIZE=5242880
      - DEFAULT_GEOFENCE_RADIUS=100
    depends_on:
      - attendance-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Todo Management Microservice
  todo-service:
    build:
      context: ./microservices/todo-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3005
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - TODO_DB_URL=postgresql://todo_user:todo_password@todo-db:5432/todo_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - todo-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Report Generation Microservice
  report-service:
    build:
      context: ./microservices/report-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - REPORT_DB_URL=postgresql://report_user:report_password@report-db:5432/report_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - report-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Approval System Microservice
  approval-service:
    build:
      context: ./microservices/approval-service
      dockerfile: Dockerfile
    ports:
      - "3011:3011"  # Changed from 3007 to 3011 to avoid conflict
    environment:
      - NODE_ENV=development
      - PORT=3011
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - APPROVAL_DB_URL=postgresql://approval_user:approval_password@approval-db:5432/approval_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - approval-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workplace Management Microservice
  workplace-service:
    build:
      context: ./microservices/workplace-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3008
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - WORKPLACE_DB_URL=postgresql://workplace_user:workplace_password@workplace-db:5432/workplace_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - workplace-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Microservice
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - PORT=3009
      - JWT_SECRET=${JWT_SECRET:-microservice-jwt-secret}
      - NOTIFICATION_DB_URL=postgresql://notification_user:notification_password@notification-db:5432/notification_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - notification-db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application with Enhanced Error Handling
  frontend-app:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_AUTH_SERVICE_URL=http://localhost:3010
      - REACT_APP_CHAT_API_URL=http://localhost:8080/api/chat
      - REACT_APP_CHAT_SOCKET_URL=http://localhost:8080
      - REACT_APP_ENABLE_ERROR_MONITORING=true
      - REACT_APP_ENABLE_RETRY_MECHANISM=true
      - REACT_APP_LOGIN_TIMEOUT=30000
      - REACT_APP_MAX_RETRY_ATTEMPTS=3
      - REACT_APP_HEALTH_CHECK_INTERVAL=30000
    depends_on:
      - api-gateway
      - auth-service
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - /app/node_modules
      - /app/.cache

  # Mobile Application with Enhanced Error Handling
  mobile-app:
    build:
      context: ./WorkforceMobileExpo
      dockerfile: Dockerfile
    ports:
      - "3003:3002"  # Changed from 3002 to 3003 to avoid conflict
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_AUTH_SERVICE_URL=http://localhost:3010
      - REACT_APP_CHAT_API_URL=http://localhost:8080/api/chat
      - REACT_APP_CHAT_SOCKET_URL=http://localhost:8080
      - REACT_APP_ENABLE_ERROR_MONITORING=true
      - REACT_APP_ENABLE_RETRY_MECHANISM=true
      - REACT_APP_LOGIN_TIMEOUT=30000
      - REACT_APP_MAX_RETRY_ATTEMPTS=3
      - REACT_APP_HEALTH_CHECK_INTERVAL=30000
    depends_on:
      - auth-service
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Services (One per microservice)
  auth-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
    ports:
      - "5432:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=user_user
      - POSTGRES_PASSWORD=user_password
    ports:
      - "5433:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  chat-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=chat_db
      - POSTGRES_USER=chat_user
      - POSTGRES_PASSWORD=chat_password
    ports:
      - "5434:5432"
    volumes:
      - chat-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chat_user -d chat_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  attendance-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=attendance_db
      - POSTGRES_USER=attendance_user
      - POSTGRES_PASSWORD=attendance_password
    ports:
      - "5435:5432"
    volumes:
      - attendance-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U attendance_user -d attendance_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  todo-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=todo_db
      - POSTGRES_USER=todo_user
      - POSTGRES_PASSWORD=todo_password
    ports:
      - "5436:5432"
    volumes:
      - todo-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todo_user -d todo_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  report-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=report_db
      - POSTGRES_USER=report_user
      - POSTGRES_PASSWORD=report_password
    ports:
      - "5437:5432"
    volumes:
      - report-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U report_user -d report_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  approval-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=approval_db
      - POSTGRES_USER=approval_user
      - POSTGRES_PASSWORD=approval_password
    ports:
      - "5438:5432"
    volumes:
      - approval-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U approval_user -d approval_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  workplace-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=workplace_db
      - POSTGRES_USER=workplace_user
      - POSTGRES_PASSWORD=workplace_password
    ports:
      - "5439:5432"
    volumes:
      - workplace-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workplace_user -d workplace_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  notification-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=notification_db
      - POSTGRES_USER=notification_user
      - POSTGRES_PASSWORD=notification_password
    ports:
      - "5440:5432"
    volumes:
      - notification-db-data:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Shared Services
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - microservices-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"  # Changed from 3001 to 3002 to avoid conflict
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - microservices-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx-microservices.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-gateway
      - frontend-app
      - mobile-app
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  auth-db-data:
  user-db-data:
  chat-db-data:
  attendance-db-data:
  todo-db-data:
  report-db-data:
  approval-db-data:
  workplace-db-data:
  notification-db-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  microservices-network:
    driver: bridge 